// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using P1;

namespace P1.Migrations
{
    [DbContext(typeof(P1Context))]
    partial class P1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("P1.Models.Billing", b =>
                {
                    b.Property<int>("BillingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressNum")
                        .HasColumnType("int");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<int>("ExpirationMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpirationYear")
                        .HasColumnType("int");

                    b.Property<string>("NameOnCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCode")
                        .HasColumnType("int");

                    b.HasKey("BillingID");

                    b.ToTable("BillingInformation");
                });

            modelBuilder.Entity("P1.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("P1.Models.CustomerBilling", b =>
                {
                    b.Property<int>("CustomerBillingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Main")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerBillingID");

                    b.HasIndex("BillingID")
                        .IsUnique();

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.ToTable("CustomersBilling");
                });

            modelBuilder.Entity("P1.Models.CustomerShipping", b =>
                {
                    b.Property<int>("CustomerShippingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Main")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShippingID")
                        .HasColumnType("int");

                    b.HasKey("CustomerShippingID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("ShippingID")
                        .IsUnique();

                    b.ToTable("CustomersShipping");
                });

            modelBuilder.Entity("P1.Models.DefaultLocation", b =>
                {
                    b.Property<int>("DefaultLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.HasKey("DefaultLocationID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("LocationID")
                        .IsUnique();

                    b.ToTable("DefaultLocations");
                });

            modelBuilder.Entity("P1.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressNum")
                        .HasColumnType("int");

                    b.Property<string>("AddressState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressZipCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("P1.Models.LocationProducts", b =>
                {
                    b.Property<int>("LocationProductsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("LocationProductsID");

                    b.HasIndex("LocationID")
                        .IsUnique();

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("LocationProducts");
                });

            modelBuilder.Entity("P1.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("OrderTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShippingID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("BillingID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("LocationID")
                        .IsUnique();

                    b.HasIndex("ShippingID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("P1.Models.OrderProducts", b =>
                {
                    b.Property<int>("OrderProductsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderProductsID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("P1.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("P1.Models.ProductInStock", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StoreLocationID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.HasIndex("OrderID");

                    b.HasIndex("StoreLocationID");

                    b.ToTable("ProductInStock");
                });

            modelBuilder.Entity("P1.Models.Shipping", b =>
                {
                    b.Property<int>("ShippingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressNum")
                        .HasColumnType("int");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShippingID");

                    b.ToTable("ShippingInformation");
                });

            modelBuilder.Entity("P1.Models.UserAccount", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.HasIndex("CustomerID");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("P1.Models.CustomerBilling", b =>
                {
                    b.HasOne("P1.Models.Billing", "Billing")
                        .WithOne("CustomerBilling")
                        .HasForeignKey("P1.Models.CustomerBilling", "BillingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P1.Models.Customer", "Customer")
                        .WithOne("CustomerBilling")
                        .HasForeignKey("P1.Models.CustomerBilling", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("P1.Models.CustomerShipping", b =>
                {
                    b.HasOne("P1.Models.Customer", "Customer")
                        .WithOne("CustomerShipping")
                        .HasForeignKey("P1.Models.CustomerShipping", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P1.Models.Shipping", "Shipping")
                        .WithOne("CustomerShipping")
                        .HasForeignKey("P1.Models.CustomerShipping", "ShippingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("P1.Models.DefaultLocation", b =>
                {
                    b.HasOne("P1.Models.Customer", "Customer")
                        .WithOne("DefaultLocation")
                        .HasForeignKey("P1.Models.DefaultLocation", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P1.Models.Location", "Location")
                        .WithOne("DefaultLocation")
                        .HasForeignKey("P1.Models.DefaultLocation", "LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("P1.Models.LocationProducts", b =>
                {
                    b.HasOne("P1.Models.Location", "Location")
                        .WithOne("LocationProducts")
                        .HasForeignKey("P1.Models.LocationProducts", "LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P1.Models.Product", "Product")
                        .WithOne("LocationProducts")
                        .HasForeignKey("P1.Models.LocationProducts", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("P1.Models.Order", b =>
                {
                    b.HasOne("P1.Models.Billing", "Billing")
                        .WithMany()
                        .HasForeignKey("BillingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P1.Models.Customer", "Customer")
                        .WithOne("Order")
                        .HasForeignKey("P1.Models.Order", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P1.Models.Location", "Location")
                        .WithOne("Order")
                        .HasForeignKey("P1.Models.Order", "LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P1.Models.Shipping", "Shipping")
                        .WithMany()
                        .HasForeignKey("ShippingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("P1.Models.OrderProducts", b =>
                {
                    b.HasOne("P1.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P1.Models.Product", "Product")
                        .WithOne("OrderProducts")
                        .HasForeignKey("P1.Models.OrderProducts", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("P1.Models.ProductInStock", b =>
                {
                    b.HasOne("P1.Models.Order", null)
                        .WithMany("ShoppingCart")
                        .HasForeignKey("OrderID");

                    b.HasOne("P1.Models.Location", "Store")
                        .WithMany()
                        .HasForeignKey("StoreLocationID");
                });

            modelBuilder.Entity("P1.Models.UserAccount", b =>
                {
                    b.HasOne("P1.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
